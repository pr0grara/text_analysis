{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/util.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAMlC;;;;;;;GAOG;AACH,MAAM,UAAU,qBAAqB,CACnC,WAAgB,EAChB,aAAkB;IAElB,MAAM,WAAW,GAAG,IAAI,GAAG,EAAa,CAAC;IACzC,KAAK,MAAM,IAAI,IAAI,aAAa,EAAE;QAChC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;KAChC;IAED,IAAI,aAAa,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;QAC/C,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;QAC7E,MAAM,CAAC,OAAO,CACZ,wBAAwB,OAAO,8DAA8D,CAC9F,CAAC;KACH;IAED,OAAO,WAAW,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAE,CAAC,CAAC;AAC9D,CAAC;AAQD,MAAM,UAAU,gBAAgB,CAAC,OAAe;IAC9C,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,wDAAwD,CAAC,CAAC;IACnF,MAAM,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,IAAI,GAAG,KAAK,IAAI,EAAE;QAChB,MAAM,YAAY,GAAiB;YACjC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC1B,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAC1B,CAAC;QACF,OAAO,YAAY,CAAC;KACrB;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,YAAY,OAAO,kCAAkC,CAAC,CAAC;KACxE;AACH,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAI,OAAU;IAC/C,uCAAY,OAAO,KAAE,eAAe,EAAE,eAAe,IAAG;AAC1D,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { StringIndexType } from \"./generated/models\";\nimport { logger } from \"./logger\";\n\nexport interface IdObject {\n  id: string;\n}\n\n/**\n * Given a sorted array of input objects (with a unique ID) and an unsorted array of results,\n * return a sorted array of results.\n *\n * @ignore\n * @param sortedArray An array of entries sorted by `id`\n * @param unsortedArray An array of entries that contain `id` but are not sorted\n */\nexport function sortResponseIdObjects<T extends IdObject, U extends IdObject>(\n  sortedArray: T[],\n  unsortedArray: U[]\n): U[] {\n  const unsortedMap = new Map<string, U>();\n  for (const item of unsortedArray) {\n    unsortedMap.set(item.id, item);\n  }\n\n  if (unsortedArray.length !== sortedArray.length) {\n    const ordinal = unsortedArray.length > sortedArray.length ? \"more\" : \"fewer\";\n    logger.warning(\n      `The service returned ${ordinal} responses than inputs. Some errors may be treated as fatal.`\n    );\n  }\n\n  return sortedArray.map((item) => unsortedMap.get(item.id)!);\n}\n\nexport interface OpinionIndex {\n  document: number;\n  sentence: number;\n  opinion: number;\n}\n\nexport function findOpinionIndex(pointer: string): OpinionIndex {\n  const regex = new RegExp(/#\\/documents\\/(\\d+)\\/sentences\\/(\\d+)\\/opinions\\/(\\d+)/);\n  const res = regex.exec(pointer);\n  if (res !== null) {\n    const opinionIndex: OpinionIndex = {\n      document: parseInt(res[1]),\n      sentence: parseInt(res[2]),\n      opinion: parseInt(res[3])\n    };\n    return opinionIndex;\n  } else {\n    throw new Error(`Pointer \"${pointer}\" is not a valid opinion pointer`);\n  }\n}\n\nexport function addStrEncodingParam<T>(options: T): T & { stringIndexType: StringIndexType } {\n  return { ...options, stringIndexType: \"Utf16CodeUnit\" };\n}\n"]}